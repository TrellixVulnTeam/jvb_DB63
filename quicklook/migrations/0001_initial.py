# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-09-13 15:41
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Alcohol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alcohol_day', models.FloatField()),
                ('alcohol_week', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='BikeStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avg_speed', models.FloatField()),
                ('avg_power', models.FloatField()),
                ('avg_speed_per_mile', models.FloatField()),
                ('avg_cadence', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ExerciseAndReporting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workout_easy_hard', models.CharField(choices=[('easy', 'Easy'), ('hard', 'Hard')], max_length=4)),
                ('workout_type', models.CharField(choices=[('trademil run', 'Trademil Run'), ('outdoor run', 'Outdoor Run'), ('bike', 'Bike'), ('swim', 'Swim'), ('elliptical', 'Elliptical')], max_length=20)),
                ('workout_time', models.CharField(max_length=10)),
                ('workout_location', models.CharField(max_length=100)),
                ('workout_duration', models.CharField(max_length=10)),
                ('maximum_elevation_workout', models.IntegerField()),
                ('minutes_walked_before_workout', models.CharField(max_length=10)),
                ('distance', models.FloatField()),
                ('pace', models.CharField(max_length=10)),
                ('avg_heartrate', models.PositiveIntegerField()),
                ('elevation_gain', models.IntegerField()),
                ('elevation_loss', models.IntegerField()),
                ('effort_level', models.PositiveIntegerField()),
                ('dew_point', models.PositiveIntegerField()),
                ('temperature', models.FloatField()),
                ('humidity', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('temperature_feels_like', models.FloatField()),
                ('wind', models.FloatField()),
                ('hrr', models.CharField(max_length=10)),
                ('hrr_start_point', models.IntegerField()),
                ('hrr_beats_lowered', models.IntegerField()),
                ('sleep_resting_hr_last_night', models.IntegerField()),
                ('vo2_max', models.IntegerField()),
                ('running_cadence', models.IntegerField()),
                ('nose_breath_prcnt_workout', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('water_consumed_workout', models.FloatField()),
                ('chia_seeds_consumed_workout', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('fast_before_workout', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=3)),
                ('pain', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=3)),
                ('pain_area', models.CharField(blank=True, max_length=20)),
                ('stress_level', models.CharField(choices=[('low', 'low'), ('medium', 'medium'), ('high', 'high')], max_length=6)),
                ('sick', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=3)),
                ('drug_consumed', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=3)),
                ('drug', models.CharField(blank=True, choices=[('controlled substances', 'Controlled Substances'), ('illicit drugs', 'Illicit Drugs'), ('sleep aids', 'Sleep Aids')], max_length=30)),
                ('medication', models.TextField()),
                ('smoke_substance', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=3)),
                ('exercise_fifteen_more', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=3)),
                ('workout_elapsed_time', models.CharField(max_length=10)),
                ('timewatch_paused_workout', models.CharField(max_length=10)),
                ('exercise_consistency', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)])),
                ('workout_duration_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('workout_effortlvl_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('avg_heartrate_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('overall_workout_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('heartrate_variability_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('workout_comment', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prcnt_non_processed_food', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('prcnt_non_processed_food_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('non_processed_food', models.TextField()),
                ('diet_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Grades',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_truth_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('overall_truth_health_gpa', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('movement_non_exercise_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('movement_consistency_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('avg_sleep_per_night_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('exercise_consistency_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('overall_workout_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('prcnt_non_processed_food_consumed_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('alcoholic_drink_per_week_grade', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
                ('penalty', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Sleep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sleep_per_wearable', models.CharField(max_length=10)),
                ('sleep_per_user_input', models.CharField(blank=True, max_length=10)),
                ('sleep_aid', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=3)),
                ('sleep_bed_time', models.CharField(max_length=10)),
                ('sleep_awake_time', models.CharField(max_length=10)),
                ('deep_sleep', models.CharField(max_length=10)),
                ('light_sleep', models.CharField(max_length=10)),
                ('awake_time', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Steps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('non_exercise_steps', models.PositiveIntegerField()),
                ('exercise_steps', models.PositiveIntegerField()),
                ('total_steps', models.PositiveIntegerField()),
                ('floor_climed', models.PositiveIntegerField()),
                ('floor_decended', models.PositiveIntegerField()),
                ('movement_consistency', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='SwimStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pace_per_100_yard', models.FloatField()),
                ('total_strokes', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='UserQuickLook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True, unique=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='swimstats',
            name='user_ql',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='swim_stats_ql', to='quicklook.UserQuickLook'),
        ),
        migrations.AddField(
            model_name='steps',
            name='user_ql',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='steps_ql', to='quicklook.UserQuickLook'),
        ),
        migrations.AddField(
            model_name='sleep',
            name='user_ql',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sleep_ql', to='quicklook.UserQuickLook'),
        ),
        migrations.AddField(
            model_name='grades',
            name='user_ql',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='grades_ql', to='quicklook.UserQuickLook'),
        ),
        migrations.AddField(
            model_name='food',
            name='user_ql',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='food_ql', to='quicklook.UserQuickLook'),
        ),
        migrations.AddField(
            model_name='exerciseandreporting',
            name='user_ql',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_reporting_ql', to='quicklook.UserQuickLook'),
        ),
        migrations.AddField(
            model_name='bikestats',
            name='user_ql',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bike_stats_ql', to='quicklook.UserQuickLook'),
        ),
        migrations.AddField(
            model_name='alcohol',
            name='user_ql',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='alcohol_ql', to='quicklook.UserQuickLook'),
        ),
    ]
